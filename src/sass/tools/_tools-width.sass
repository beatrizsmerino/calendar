// TOOLS
// width
// ------------------





// MIXIN - WIDTH WITHOUT MARGIN FOR PADDING
// =================================================
@mixin t-width($items)
	width: #{100/$items + "%"}





// MIXIN - WIDTH WITH MARGIN
// =================================================
@mixin t-width-margin($items, $margin: 2)
	width: #{(((100 - (($margin * $items) - $margin)) / $items)) + "%"}

	@if $items == 1
		&:not(:last-child)
			margin-right: 0

	@if $items > 1
		&:not(:last-child)
			margin-right: #{$margin + "%"}





// MIXIN - WIDTH CLASES
// =================================================
// This loop generate the clases for width form 5 to 5 and on the other hand, other loop generate the width 33 and 66.

// Generation clases
@mixin t-width-clases()
	// 0-5-10-15...100
	$x: 20
	@for $i from 0 through $x
		// from 0 to 20
		   $step5: 5
		   $width: (100 / $x) * $i

		   .width#{$i * $step5} // .width0 .width5 .with10 ...
			 width:#{$width + "%"}
	// 100/0->0%   100/1->100...

	// 33-66
	$x: 2
	@for $i from 1 through $x
		$step: 33
		$width: $i/3*100

		.width#{$i * $step}
			width:#{$width + "%"}





// MIXIN - WIDTH CLASES OF 'STEP'%
// =================================================
// This mixin 'widthClases' contain a loop that create fluid width classes of 'step'% width until reaching the 'max'.
//
// This mixin require:
//
// Args:
// ------------------
// - $max
// @param {number} Top/max width value.
// - $step
// @param {number} Step/division's size parameter.

  
// Declaration of mixin
@mixin t-width-clases-step($max, $step)
	@for $i from 1 through floor($max/$step)
		$i: $i * $step
		.width#{$i}
			width: percentage($i/$max)


// Use mixin:
// @include t-width-clases-step(100, 20);
